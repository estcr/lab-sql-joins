-- Write SQL queries to perform the following tasks using the Sakila database:
USE sakila;
-- 1 List the number of films per category.

SELECT sc.name, COUNT(sfc.category_id) as cantidad
FROM sakila.category as sc
LEFT JOIN sakila.film_category as sfc
ON sc.category_id = sfc.category_id
GROUP BY sc.name;

-- 2 Retrieve the store ID, city, and country for each store.
select * from address;
select * from country;

SELECT store_id, city, country
FROM sakila.store as st
JOIN sakila.address as sa
ON st.address_id = sa.address_id
JOIN sakila.city as sc
ON sa.city_id = sc.city_id
JOIN sakila.country as sco
ON sc.country_id = sco.country_id;

-- 3 Calculate the total revenue generated by each store in dollars.
select ssto.store_id , SUM(sp.amount) Ganancias
FROM sakila.store as ssto
JOIN sakila.staff as ssta
ON ssto.store_id = ssta.store_id
JOIN sakila.payment as sp
ON ssta.staff_id = sp.staff_id
group by ssto.store_id;
-- 4 Determine the average running time of films for each category.
SELECT sc.name, ROUND(AVG(sf.length),2) as promedio_duracion
FROM sakila.category as sc
LEFT JOIN sakila.film_category as sfc
ON sc.category_id = sfc.category_id
JOIN sakila.film as sf
ON sf.film_id = sfc.film_id
GROUP BY sc.name;
-- Bonus:
-- 5 Identify the film categories with the longest average running time.
SELECT sc.name, ROUND(AVG(sf.length),2) as promedio_duracion
FROM sakila.category as sc
LEFT JOIN sakila.film_category as sfc
ON sc.category_id = sfc.category_id
JOIN sakila.film as sf
ON sf.film_id = sfc.film_id
GROUP BY sc.name
ORDER BY promedio_duracion DESC;

-- 6 Display the top 10 most frequently rented movies in descending order. contar rental id
SELECT sf.title, count(sr.rental_id) as recuento
FROM sakila.film as sf
JOIN sakila.inventory as si
ON sf.film_id = si.film_id
JOIN sakila.rental as sr
ON si.inventory_id = sr.inventory_id
GROUP BY sf.title
ORDER BY recuento DESC
LIMIT 10;

-- 7 Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT sf.title, SUM(sst.store_id) as cantidad
FROM sakila.film as sf
JOIN sakila.inventory as si
ON sf.film_id = si.film_id
JOIN sakila.store as sst
ON si.store_id= sst.store_id
WHERE sf.title = "Academy Dinosaur" and sst.store_id = 1
GROUP BY sf.title;


-- 8 Provide a list of all distinct film titles, along with their availability status in the inventory. Include a column indicating whether each title is 'Available' or 'NOT available.' 
-- Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."
SELECT 
    sf.title,
    CASE 
        WHEN si.film_id IS NULL THEN 'Not Available'
        ELSE 'Available'
    END AS status
FROM sakila.film as sf
LEFT JOIN sakila.inventory as si
ON sf.film_id = si.film_id;



